
什么是包？
包是用来分门别类的管理不同类的，类似于文件夹、建包利于程序的管理和维护
建包的语法格式：package 公司域名倒写.技术名称。包名建议全部英文小写，且具备意义
例如：package com.itheima.javabean;
建包语句必须在第一行，一般 IDEA 工具会帮助创建

同一个包下的类，互相可以直接访问
不同包下的类，必须先导包才可以访问
如果这个类中使用不同包下的相同的类名，此时默认只能导入一个类的包，另一个类要使用全名访问（带包名访问）




什么是权限修饰符？
权限修饰符：是用来控制一个成员能够被访问的范围。
可以修饰成员变量，方法，构造器，内部类，不同权限修饰符修饰的成员能够被访问的范围将受到限制

权限修饰符：有四种作用范围由小到大（private -> 缺省 -> protected -> public）
范围：修饰符      同一个类中     同一个包中其他类     不同包下的子类     不同包下的无关类
      private       √
       缺省          √                √                                                  包访问权限
      protected     √                √                   √
      public        √                √                   √                   √
                                                     （继承，需用子类访问）





final的作用：
final 关键字是最终的意思，可以修饰（类、方法、变量）
修饰类：表明该类是最种类，不能被继承
修饰方法：表明该方法是最终方法，不能被重写
修饰变量：表示该变量第一次赋值后，不能再次被赋值（有且仅能被赋值一次）
public static final 修饰的也称为常量

注意事项：final 修饰的变量是基本类型，那么变量存储的数据值不能发生改变
          final 修饰的变量是引用类型，那么变量存储的地址值不能发生改变，但是地址指向的对象内容是可以改变的





常量是什么？
常量是使用了 public static final 修饰的成员变量，必须有初始化值，而且执行的过程中其值不能被改变
常量的作用和好处：可以用于做系统的配置信息，方便程序的维护，同时也能提高可读性，实现软编形式
常量命名规范：英文单词全部大写，多个单词则用下划线连接起来
例如 public static final String ASDW_WDAS = "我是傻逼";

执行原理：在编译阶段会进行“宏替换”，把使用常量的地方全部替换成真实的字面量
          这样做的好处是让使用常量的程序的执行性能与直接使用字面量是一样的
在实现项目时，虽然可以实现可读性，但是入参值不受约束，代码相对不够严谨





什么是枚举？
枚举是java中的一种特殊类型
枚举的作用：“是为了做信息的标志和信息的分类”

定义枚举类的格式：
修饰符 enmu 枚举名称{
    第一行都是罗列枚举类实例的名称
}
例如：
enum Season{
    SPRING,SUMMER,AUTUMN,WINTER;
}
对以上枚举代码进行反编译，可得：
Compiled from "Season.java"
public final class Season extends java.lang.Enum<Season>{
    public static final Season SPRING = new Season();
    public static final Season SUMMER = new Season();
    public static final Season AUTUMN = new Season();
    public static final Season WINTER = new Season();
    public static Season[] values();
    public static Season valueOf(java.lang.String);
}

枚举的特征：
枚举类都是继承了枚举类型：java.lang.Enum
枚举都是最终类，不可以被继承
构造器的构造器都是私有的，枚举对外不能创建对象
枚举类的第一行默认都是罗列枚举对象的名称的
枚举类相当于是多例模式

代码可读性好，入参约束严谨，代码优雅，是最好的信息分类技术，建议使用
