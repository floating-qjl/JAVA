
反射概述
        反射是指对于任何一个Class类，在"运行的时候"都可以直接得到这个类全部成分。
        在运行时,可以直接得到这个类的构造器对象:Constructor
        在运行时,可以直接得到这个类的成员变量对象:Field
        在运行时,可以直接得到这个类的成员方法对象:Method
        这种运行时动态获取类信息以及动态调用类中成分的能力称为Java语言的反射机制。


反射的关键:
        反射的第一步都是先得到编译后的Class类对象，然后就可以得到Class的全部成分。

        HelloWorld.java -> javac -> HelloWorld.class
        Class c = Helloworld.class;



反射的第一步:获取Class类的对象
        Class类中静态方法
        1、forName(String className)
        2、类名.class
        3、对象.getClass()



代码：
        // 1、Class类中的一个静态方法: forName(全限名:包名＋类名)
        Class c = Class.forName("com.itheima.d2_reflect_class.Student");
        System.out.println(c)；// Student.class

        //2、类名.class
        Class c1 = Student.class;
        System.out.println(c1)；
        //3、对象.getclass()获取对象对应类的Class对象。
        Student s = new Student();
        Class c2 = s.getClass();
        System.out.println(c2);




反射的第二步:获取构造器对象

方法：
Constructor<?>[] getConstructors()              返回所有构造器对象的数组(只能拿public的)；
Constructor<?>[] getDeclaredConstructors()      返回所有构造器对象的数组，存在就能拿到
Constructor<T> getConstructor(Class<?>... parameterTypes)          返回单个构造器对象(只能拿public的)；
Constructor<T> getDeclaredConstructor(Class<?>... parameterTypes)  返回单个构造器对象，存在就能拿到


代码：
        @Test
        public void getConstructors(){
        // a.第一步:获取类对象
        Class c = Student.class;
        // b.提取类中的全部的构造器对象（只能拿 public 构造器）
        Constructor[] constructors = c.getConstructors();
        // c.遍历构造器
        for (Constructor constructor: constructors) {
            System.out.println(constructor.getName())；
        }
        }


        @Test
        public void getconstructors(){
        // a.第一步:获取类对象
        Class c = Student.class;
        // b.提取类中的全部的构造器对象
        Constructor[] constructors = c.getDeclaredConstructors();
        // c.遍历构造器
        for (Constructor constructor: constructors) {
        System.out.println(constructor.getName())；
        }
        }


       @Test
        public void getConstructors() throws Exception{
        // a.第一步:获取类对象
        Class c = Student.class;
        // b.定位单个构造器对象（按照参数定位无参数构造器）
        Constructor cons = c.getConstructor();
        System.out.println(constructor.getName())；
        }


       @Test
        public void getDeclaredConstructors() throws Exception{
        // a.第一步:获取类对象
        Class c = Student.class;
        // b.定位单个构造器对象（按照参数定位无参数构造器）
        Constructor cons = c.getDeclaredConstructor();
        System.out.println(constructor.getName())；

        //定位某个有参构造器
        Constructor cons1 = c.getDeclaredConstructor(String.class,int.class);
        System.out.println(cons1.getName() + "===>" + cons1.getParameterCount())；

        }



使用反射技术获取构造器对象并使用
        获取构造器的作用依然是初始化一个对象返回。

Constructor类中用于创建对象的方法:
        T newInstance(Object... initargs)            根据指定的构造器创建对象
        public void setAccessible(boolean flag)    设置为true,表示取消访问检查 进行暴力反射


代码：
        // 定位单个构造器对象〔按照参数定位无参数构造器)
        Constructor cons = c.getDeclaredConstructor();

        //如果遇到了私有的构造器，可以暴力反射
        cons.setAccessible(true); //权限被打开

        Student s = (Student) cons.newInstance();
        System.out.println(s);


注意：反射可以破坏封装性，私有的也可以执行了。





使用反射技术获取成员变量对象并使用：
        1.获得class对象
        2.获得Field对象
        3.赋值或者获取值

反射的第一步是先得到类对象，然后从类对象中获取类的成分对象。
Class类中用于获取成员变量的方法：

        Field[] getFields()                      返回所有成员变量对象的数组(只能拿public的)
        Field[] getDeclaredFields()              返回所有成员变量对象的数组，存在就能拿到
        Field getField(String name)            返回单个成员变量对象（(只能拿public的)
        Field getDeclaredField(String name)    返回单个成员变量对象，存在就能拿到

Field中取值、赋值的方法：
        void set(Object obj, Object value):    赋值
        Object get(Object tisbj)               获取值。



代码：

//获取全部的成员变量,
@Test
public void getDeclaredFields(){
    //定位Class对象
    Class c = Student.class;
    //定位全部成员变量
    Field[] fields = c.getDeclaredFields();
    //c.遍历一下
    for (Field field : fields) {
    System.out.println(field.getName() + "==>" + field.getType())；
    }
}

//获取某个成员变量对象Field getDeclaredField(String name);
@Test
public void..getDeclaredFields(){
        //a.定位Class对象
        Class c = student.class;
        // b.根据名称定位某个成员变量
        Field f = c.getDeclaredField(age)；
        System.out.println(f.getName() + "==>" + f.getType());

        f.setAccessible(true);//暴力打开权限
        //赋值
        Student s = new Student();
        f.set(s,18);//s.setAge(18);

        //取值
        int age = (int) f.get(s);

}




反射获取方法对象：
                获得class对象
                获得Method对象
                运行方法

方法：
Method[ ] getMethods()            返回所有成员方法对象的数组(只能拿public的)
Method[ ] getDeclaredMethods()    返回所有成员方法对象的数组，存在就能拿到
Method getMethod(String name，class<?>... parameterTypes)          返回单个成员方法对象(只能拿public的)
Method getDeclaredMethod(String name，Class<?>... parameterTypes)  返回单个成员方法对象，存在就能拿到

使用反射技术获取方法对象并使用
        获取成员方法的作用依然是在某个对象中进行执行此方法

方法：
object invoke(Object obj, object... args)
运行方法
参数一:用obj对象调用该方法
参数二:调用方法的传递的参数（如果没有就不写)
返回值:方法的返回值（如果没有就不写)


代码：
@Test
public void getDeclaredMethods(){
    //获取类对象
    Class c = Dog.class;
    //提取全部方法，包括私有的
    Method[] methods = c.getDeclaredMethods();
    //遍历全部方法
    for (Method method : methods){
    System.out. print1n(method.getName() + "返回值类型:" + method.getReturnType() + "参数个数:" + method.getParameterCount())；
}


@Test
public void getDeclaredMethod() throws Exception{
        //获取类对象
        Class c = Dog.class;
        Method m = c.getDeclaredMethod(eat)；
        Method m2 = c.getDeclaredMethod(eat, String.class)；

        //暴力打开权限
        m.setAccessiblie(true);

        //触发方法的执行
        Dog d = new Dog();
        //注意：方法如果没有结果回来，则返回null
        Object result = m.invoke(d);

        Object result2 = m2.invoke(d, "骨头");

}






反射的作用-绕过编译阶段为集合添加数据:

反射是作用在运行时的技术，此时集合的泛型将不能产生约束了，此时是可以为集合存入其他任意类型的元素的。
        ArrayList<lnteger> list = new ArrayList<>();
        list.add(100)；
        // list.add(“黑马");//报错
        list.add(99);

泛型只是在编译阶段可以约束集合只能操作某种数据类型，在编译成Class文件进入运行阶段的时候，
其真实类型都是ArrayList了，泛型相当于被擦除了。

代码：
        ArrayList<String> lists1 = new ArrayList<>();
        ArrayList<Integer> lists2 = new ArrayList<>();

        System.out.println(lists1.getclass() == lists2.getclass())；//true

        ArrayList<Integer> list3 = new ArrayList<>();
        lists3.add(23);
        lists3.add(22);

        Class c = lists3.getclass()；
        //定位c类中的add方法
        Method add = c.getDeclaredMethod( name: "add", Object.class);
        boolean rs = (boolean) add.invoke(lists3,...args: "黑马")；//true

        //或者
        ArrayList list4 = list3;
        //再利用 list4 进行添加任意类型，也可突破泛型限制





反射的作用-通用框架的底层原理：

需求：
        给你任意一个对象，在不清楚对象字段的情况可以，可以把对象的字段名称和对应值存储到文件中去。

分析：
        定义一个方法，可以接收任意类的对象。
        每次收到一个对象后，需要解析这个对象的全部成员变量名称。
        这个对象可能是任意的，那么怎么样才可以知道这个对象的全部成员变量名称呢
        使用反射获取对象的Class类对象，然后获取全部成员变量信息。
        遍历成员变量信息，然后提取本成员变量在对象中的具体值
        存入成员变量名称和值到文件中去即可。



public static void save(Object obj){
        PrintStream ps = new PrintStream(new FileOutputStream
        ("junit-reflect-annotation-proxy-app/src/data.txt",true);

        //提取这个对象的全部成员变最:只有反射可以解决
        Class c = obj.getClass();

        //c.getSimpleName()获取当前类名
        //c.getName获取全限名:包名+类名
        ps.println( "=============" + c.getSimpleName() + "===============");

        //提取它的全部成员变量
        Field[ ] fields = c.getDeclaredFields();
        //获取成员变量的信思
        for (Field field : fields) {
            String name = field.getName();
            //提取本成员变量在obj对象中的值（取值）
            field.setAccessible(true);
            String value = field.get(obj) + "";
            ps.println(name + "=" + value);
        }
}
