

Math类：
包含执行基本数字运算的方法，Math类没有提供公开的构造器
Math类的成员都是静态的，可以通过类名直接使用

Math类的常用方法：
public static int abs(int a)                 获取参数绝对值。
public static double cell(doublr a)          向上取整。
public static double floor(double a)        向下取整。
public static int round(float a)             四舍五入。
public static int max(int a,int b)           获取两个 int 中最大值。
public static double pow(double a,double b) 返回 a 的 b 次幂的值。
public static double random()                 返回值为 double 的随机值，范围[0.0,1.0) --- 包前不包后
依然可以使用减加法得到范围





System 类概述：
System 的功能是通用的，都是直接用类名调用即可，所以 System 不能被实例化

System 类的常用方法：
public static void exit(int status)       终止当前运行的java虚拟机，非零表示异常终止
public static long currentTimeMillis()    返回当前系统的时间毫秒值形式。
时间戳 --- 计算机认为时间是有起点的，起始时间为：1970年1月1日 00:00:00
时间毫秒值：指的是从1970年1月1日 00:00:00走到此刻的总的毫秒值，应该是很大的
public static void arraycopy(数据源数组，起始索引，目的地数组，起始索引，拷贝个数)    用于数组拷贝





BigDecimal 作用：
用于解决浮点型运算精度失真的问题

使用步骤：
创建对象 BigDecimal 封装浮点型数据（最好的方式是调用方法）
public static BigDecimal valueOf(double val);     包装浮点数成为 BigDecimal 对象
实际上 BigDecimal 也存在失真问题，所以直接定义（new）对象时传参一定要传字符串，例如："0.1"，而上式 valueOf 的源码可帮助转换为字符串
例如：
        BigDecimal a1 = new BigDecimal("0.1");
        BigDecimal a2 = BigDecimal.valieOf(0.1);
BigDecimal 常用API：
public BigDecimal add(BigDecimal b)                                   加法；
public BigDecimal subtract(BigDecimal b)                              减法；
public BigDecimal multiply(BigDecimal b)                              乘法；
public BigDecimal divide(BigDecimal b)                                除法；
public BigDecimal divide(另一个BigDecimal对象，精确几位，舍入模式)    除法；
                                除数

最终结果要转换成 double 类型传给别人，所以可以使用下式：
double re = c1.doubleValue();

注意：BigDecimal 一定要做精度运算，如果遇到无法精确的，例如在计算 3.0/10.0 时就会报错
      所以可以使用最新的 divide(另一个BigDecimal对象，精确几位，舍入模式)  来避免报错
