//继承：
//形式：子类 extends 父类
//特点：1.子类不能继承父类的构造器
//      2.子类可以继承父类的私有成员，但是不能直接访问（有一定争议）
//      3.子类不能继承父类的静态变量，只是共享（静态变量独一份属于父类）

//JAVA只支持单继承，不支持多继承
//如果支持多继承，则可能会出现二义性，不能确定到底调用哪个父类

//JAVA支持多层继承
//a 继承 b，b 继承 c，若 b 和 c 有相同的方法时，a 会就近调用，即优先父类 a 而非爷爷类 b

//java中所有类，要么直接继承了 Object，要么默认继承了 Object，要么间接继承了 Object，Object 为祖宗类

//在子类方法中访问成员（成员变量、成员方法）满足：就近原则
//先子类局部范围找
//然后子类成员范围找
//然后父类成员范围找，如果父类范围还没有找到则报错

//若子父类出现重名方法，若直接在子类调用会使用子类的方法，若想使用父类方法，则使用 super.父类方法（成员）

//方法重写：在继承体系中，子类出现了和父类一模一样的方法声明，我们就成子类这个方法时重写的方法
//应用场景：当子类需要父类功能，但父类的该功能不完全满足自己的需求时
//          子类可以重写父类的方法
//@Override 是重写校验注释，放在重写后的方法上，作为重写是否正确的校验注释
//          加上该注释后如果重写错误，编译阶段会出现错误提示
//          提高程序的可读性，代码安全、优雅

//重写方法的名称、形参列表必须与被重写的方法名称和参数列表一致
//私有方法不能被重写，会被默认为新方法（可加上@Override 检验）
//子类重写父类方法时，访问权限必须大于或者等于父类（缺省 < protected < public）
//子类不能重写父类的静态方法，如果重写会报错的



//子类继承父类后构造器特点：
//子类中所有的构造器（有参、无参）默认都会访问父类中无参的构造器，再执行自己
//子类在初始化的时候，有可能会使用到父类中的数据，如果父类没有完成初始化，子类将无法使用父类的数据
//子类初始化之前，一定要调用父类构造器先完成父类数据空间的初始化

//super调用父类有参数构造器的作用：
//初始化继承自父类的数据
//如果父类中没有无参数构造器，只有有参构造器，会报错，因为子类默认是调用父类无参构造器的
//子类构造器中可以通过书写super（...），手动调用弗雷德有参数构造器

//this 代表本类对象的引用，super 代表父类存储空间的标识
//this.成员变量（成员方法）可以访问本类的变量或方法，this() 表示去调用本类的其他构造器，
// 本类其他构造器会通过 super 去手动调用父类的构造器，最终还是会调用父类的构造器的
//this（）和super（）都只能放在构造器的第一行，所以二者不能共存在同一个构造器中
//this（）存在时就没有super（），也就没有初始化父类，因此必须借用this（）调用的兄弟类进行初始化，要放于第一行
//super（）用于初始化父类，必须先初始化才能防止下面代表出错，要放于第一行
