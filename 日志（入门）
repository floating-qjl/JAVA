
日志：
        生活中的日志:生活中的日志就好比日记，可以记录你生活的点点滴滴。
        程序中的日志:程序中的日志可以用来记录程序运行过程中的信息，并可以进行永久存储。


以前记录日志的方式
        Scanner sc = new Scanner(System.in);
        System.out.println("请输入一个整数");
        String number = sc.nextLine();
        try {
        int result = lnteger.parselnt(number);
        System.out.println("输入的数字为"+ result);
        } catch (NumberFormatException e){
            System.out.println("输入的数字有误，请输入一个整数");
        }


输出语句的弊端:
        信息只能展示在控制台
        不能将其记录到其他的位置（文件，数据库)
        想取消记录的信息需要修改代码才可以完成




日志技术具备的优势
        可以将系统执行的信息选择性的记录到指定的位置（控制台、文件中、数据库中）。
        可以随时以开关的形式控制是否记录日志，无需修改源代码。

体系结构：
        日志规范:一些接口，提供给日志的实现框架设计的标准。
        日志框架:牛人或者第三方公司已经做好的日志记录实现代码，后来者直接可以拿去使用。
        因为对Commons Logging的接口不满意，有人就搞了SLF4J。因为对Log4j的性能不满意，有人就搞了Logback。

常见的规范是:
        commons Logging
        simple Logging Facade for Java

日志的常见实现框架：
        Log4J
        Logback(我们重点学习的，其他的都大同小异)



Logback日志框架：
        Logback是由log4j创始人设计的另一个开源日志组件，性能比log4j要好
        官方网站: https://logback.qos.ch/index.html


Logback主要分为三个技术模块:
        logback-core: logback-core模块为其他两个模块奠定了基础，必须有。
        logback-classic:它是og4j的一个改良版本，同时它完整实现了slf4j  ·APl。
        logback-access模块与Tomcat和Jetty 等Servlet容器集成，以提供HTTP 访问日志功能

        package LIBB;

        import org.slf4j.Logger;
        import org.slf4j.LoggerFactory;

public class Test {
    public static final Logger LOGGER = LoggerFactory.getLogger("Test.class");
    public static void main(String[] args) {
        try {
            LOGGER.debug("start");
            LOGGER.info("find");
            int a = 10;
            int b = 0;
            LOGGER.trace("a = " + a);
            LOGGER.trace("b = " + b);
            System.out.println(a / b);
        } catch (Exception e) {
            e.printStackTrace();
            LOGGER.error("error" + e);
        }
    }
}


Logback快速入门
        需求:导入Logback日志技术到项目中，用于纪录系统的日志信息分析:
        ①:在项目下新建文件夹lib，导入Logback的相关jar包到该文件夹下，开添加到项目依颗厍中去。
        logback-classic-1.2.3.jar
        logback-core-1.2.3.
        jarslf4j-api-1.7.26.jar
        ②:将Logback的核心配置文件logback.xml直接拷贝到src目录下（必须是src下
        ③:在代码中获取日志的对象
           public static final Logger LOGGER= LoggerFactory.getLogge("类对象");
        ④:使用日志对象LOGGER调用其方法输出不能的日志信息

Logback日志输出位置、格式设置:
        通过logback.xml中的<append>标签可以设置输出位置和日志信息的详细格式。
        通常可以设置2个日志输出位置:一个是控制台、一个是系统文件中

输出到控制台的配置标志：
<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
输出到系统文件的配置标志：
<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">


日志级别：
        级别程度依次是:TRACE<DEBUG< INFO<WARN<ERROR﹔默认级别是debug(忽略大小写)，对应其方法。
        作用:用于控制系统中哪些日志级别是可以输出的，只输出级别不低于设定级别的日志信息。
        ALL 和OFF分别是打开全部日志和关闭全部日志

具体在<root level="INFO">标签的level属性中设置日志级别。
