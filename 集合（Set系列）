

Set集合：
   特点：
        无序:存取顺序不一致（第一次无序，后面可能就不变了）
        不重复:可以去除重复
        无索引:没有带索引的方法，所以不能使用普通for循环遍历，也不能通过索引来获取元素。

Set集合实现类特点：
        HashSet: 无序、不重复、无索引。
        LinkedHashSet: 有序、不重复、无索引。
        TreeSet: 排序、不重复、无索引。


HashSet：
        set<string> sets = new HashSet<>();（经典代码）
        Set<String> sets = new LinkedHashSet<>();

Set集合的功能上基本上与Collection的API一致。



HashSet底层原理：
        HashSet集合底层采取哈希表存储的数据。
        哈希表是一种对于增删改查数据性能都较好的结构。

哈希表的组成：
        JDK8之前的，底层使用数组+链表组成
        JDK8开始后，底层采用数组+链表+红黑树组成。

哈希值：
        是JDK根据对象的地址，按照某种规则算出来的int类型的数值。
Object类的API；
        public int hashCode():返回对象的哈希值
对象的哈希值特点：
        同一个对象多次调用hashCode()方法返回的哈希值是相同的
        默认情况下，不同对象的哈希值是不同的。

Hashset无序原理解析


HashSet1.7版本原理解析:数组＋链表＋(结合哈希算法)
        Set<String> sets = new HashSet<>();


创建一个默认长度16，默认加载因为0.75的数组，数组名table
根据元素的哈希值跟数组的长度求余计算出应存入的位置（哈希算法)
判断当前位置是否为null，如果是null直接存入
如果位置不为null，表示有元素，则调用equals方法比较
如果一样，则不存，如果不一样，则存入数组
        JDK 7新元素占老元素位置，指向老元素
        JDK 8中新元素挂在老元素下面
当数组存满到16*0.75=12时，就自动扩容，每次扩容原先的两倍

结论:哈希表是一种对于增删改查数据性能都较好的结构。



JDK1.8版本开始HashSet原理解析：
        底层结构:哈希表（数组、链表、红黑树的结合体)
        当挂在元素下面的数据过多时，查询性能降低，从JDK8开始后，当链表长度超过8的时候，自动转换为红黑树。

结论:JDK8开始后，哈希表对于红黑树的引入进一步提高了操作数据的性能。



Hashset去重复原理解析：
        创建一个默认长度16的数组，数组名table
        根据元素的哈希值跟数组的长度求余计算出应存入的位置（哈希算法)
        判断当前位置是否为null，如果是null直接存入
        如果位置不为null，表示有元素，则调用equals方法比较
        如果一样，则不存，如果不一样，则存入数组，

结论:如果希望Set集合认为2个内容一样的对象是重复的，必须重写对象的hashCode()和equals()方法







LinkedHashSet集合概述和特点：
        有序、不重复、无索引。
        这里的有序指的是保证存储和取出的元素顺序一致
        原理:底层数据结构是依然哈希表，只是每个元素又额外的多了一个双链表的机制记录存储的顺序。


TreeSet集合概述和特点：
        不重复、无索引、可排序
        可排序:按照元素的大小默认升序（有小到大）排序。
        TreeSet集合底层是基于红黑树的数据结构实现排序的，增删改查性能都较好。
        注意:Treeset集合是一定要排序的，可以将元素按照指定的规则进行排序。

Treeset集合默认的规则：
        对于数值类型: Integer , Double，官方默认按照大小进行升序排序。
        对于字符串类型:默认按照首字符的编号升序排序。
        对于自定义类型如Student对象，TreeSet无法直接排序。

结论:想要使用TreeSet存储自定义类型。需要制定排序规则


set<Apple> apples m new TreeSet<>0;

自定义排序规则：
        TreeSet集合存储对象的的时候有2种方式可以设计自定义比较规则
方式一：
        让自定义的类(如学生类）实现Comparable接口重写里面的compareTo方法来定制比较规则。
        0verride
        publie int compareTo(Apple o) {
        //按重量进行比较的
        return this.weight - o.weight >= d ? 1 : -1;
        }

        方式二：
        Treeset集合有参数构造器，可以设置Comparator接口对应的比较器对象，来定制比较规则。
        Set<Apple> apples = new Treeset<>(new Comparator<Apple>(){
            @0verridc
            public int compare(Apple o1,Apple o2){
            return o1.getweight()-o2.getWeight();
            }
        });

        Set<Apple> apples = new TreeSet<>(( o1, o2) -> Double.compare(o2.getPrice() , o1.getPrice());

注意:如果Treeset集合存储的对象有实现比较规则，集合也自带比较器，默认使用集合自带的比较器排序。(就近原则))


1．如果希望元素可以重复，又有索引，索引查询要快?
        用ArrayList集合，基于数组的。《用的最多)
2．如果希望元素可以重复，又有索引，增删首尾操作快?
        用LinkedList集合，基于链表的。
3．如果希望增删改查都快,但是元素不重复、无序、无索引。
        用Hashset集合，基于哈希表的。
4．如果希望增删改查都快,但是元素不重复、有序、无索引。
        用LinkedHashSet集合，基于哈希表和双链表。
5．如果要对对象进行排序。
        用Treeset集合，基于红黑树。后续也可以用List集合实现排序。



