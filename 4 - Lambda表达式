

Lambda概述：
Lambda表达式是JDK8开始后的一种新语法形式。
作用:简化匿名内部类的代码写法。

Lambda表达式的简化格式：
(匿名内部类被重写方法的形参列表)->{
    被重写方法的方法体代码
}
注:->是语法形式，无实际含义

注意: Lambda表达式只能简化 函数式接口的匿名内部类的写法形式

什么是函数式接口?
首先必须是接口、其次接口中有且仅有一个抽象方法的形式
通常我们会在接口上加上一个 @FunctionalInterface 注解，标记该接口必须是满足函数式接口。


Lambda的好处?
Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可以传递的代码，
它可以写出更简洁、更灵活的代码，作为一种更紧凑的代码风格，使Java语言表达能力得到了提升。


Lambda表达式的省略写法（进一步在Lambda表达式的基础上继续简化)：

        btn.addActionListener(new ActionListener() {
           @Override
           public void actionPerformed(ActionEvent e) {
                 System.out.println("有人点我，点我，点我!!");
            }
        });

参数类型可以省略不写。
        btn.acalActionListener((ActionEvent e) ->{
        System.out.println("有人点我,点我，点我!!"):
        });

如果只有一个参数，参数类型可以省略，同时()也可以省略。
        btn.acalActionListener( e ->{
        System.out.println("有人点我,点我，点我!!"):
        });

如果Lambda表达式的方法体代码只有一行代码。可以省略大括号不写,同时要省略分号!
        btn.acalActionListener( e ->System.out..println("有人点我,点我，点我!!"));

如果Lambda表达式的方法体代码只有一行代码。可以省略大括号不写。此时，如果这行代码是return语句，
必须省略return不写，同时也必须省略";"不写
        Arrays.sort(ages1, ( o1,o2) -> {
        return o2 - o1;//降序
        });

        Arrays.sort(ages1, ( o1,o2) -> o2 - o1 );
