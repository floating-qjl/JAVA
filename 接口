
接口：
接口的格式：（接口用关键字 interface 来定义）
public interface 接口名{
    常量:：例如 public static final String arr = "heiheihie";
    抽象方法：例如 public abstract void run();
}
接口是一种规范，规范一定是公开的,所以代码中的 public abstract 和 public static final 可以省略不写

接口的用法：
接口是用来被类实现的，实现接口的类称为实现类，实现类可以理解成所谓的子类
修饰符 class 实现类 implements 接口1，接口2，接口3，...{
}
实现的关键字：implements

接口可以被类单实现，也可以被类多实现

注意事项：
一个类实现接口，必须重写完全部接口的全部抽象方法，否则这个类需要定义成抽象类

类和类的关系：单继承
类和接口的关系：多实现
接口和接口的关系：多继承，一个接口可以同时继承多个接口

接口多继承的作用：规范合并，整合多个接口为同一个接口，便于子类实现


JDK8开始接口新增方法：
第一种：默认方法
类似之前写的普通实例方法，必须使用default修饰
默认会public修饰，需要用接口的实现类的对象来调用
default void run(){
    System.out.println("haha");
}

第二种：静态方法
默认会 public 修饰，必须 static 修饰
注意：接口的静态方法必须用本身的接口名来调用
static void inAddr(){
    System.out.println("hahaha");
}

第三种：私有方法
就是私有的实例方法，必须使用 private 修饰，从 JDK1.9 才开始有
只能在本类中被其他的默认方法或者私有方法访问
private void go(){
    System.out.println("diwaugdiu");
}

这些方法在开发中很少使用，通常是java源码涉及到

接口注意事项：
接口不能创建对象（接口更加彻底的抽象）
一个类实现多个接口，多个接口中有同样的静态方法不冲突（接口的静态方法不能被对象调用，只能使用类名，即接口名调用）
一个类继承了父类，同时又实现了接口，父类中和接口中有同名方法，默认用父类的（class Cat extends Animal implements Food{}）
一个类实现了多个接口，多个接口中存在同名的默认方法，不冲突，这个类重写该方法即可（本来应该是冲突的，但是重写后只会调用自己的）
一个接口继承多个接口，是没有问题的，如果多个接口中存在规范冲突则不能多继承（接口内部抽象方法重名等冲突）


接口：
接口的格式：（接口用关键字 interface 来定义）
public interface 接口名{
    常量:：例如 public static final String arr = "heiheihie";
    抽象方法：例如 public abstract void run();
}
接口是一种规范，规范一定是公开的,所以代码中的 public abstract 和 public static final 可以省略不写

接口的用法：
接口是用来被类实现的，实现接口的类称为实现类，实现类可以理解成所谓的子类
修饰符 class 实现类 implements 接口1，接口2，接口3，...{
}
实现的关键字：implements

接口可以被类单实现，也可以被类多实现

注意事项：
一个类实现接口，必须重写完全部接口的全部抽象方法，否则这个类需要定义成抽象类

类和类的关系：单继承
类和接口的关系：多实现
接口和接口的关系：多继承，一个接口可以同时继承多个接口

接口多继承的作用：规范合并，整合多个接口为同一个接口，便于子类实现


JDK8开始接口新增方法：
第一种：默认方法
类似之前写的普通实例方法，必须使用default修饰
默认会public修饰，需要用接口的实现类的对象来调用
default void run(){
    System.out.println("haha");
}

第二种：静态方法
默认会 public 修饰，必须 static 修饰
注意：接口的静态方法必须用本身的接口名来调用
static void inAddr(){
    System.out.println("hahaha");
}

第三种：私有方法
就是私有的实例方法，必须使用 private 修饰，从 JDK1.9 才开始有
只能在本类中被其他的默认方法或者私有方法访问
private void go(){
    System.out.println("diwaugdiu");
}

这些方法在开发中很少使用，通常是java源码涉及到

接口注意事项：
接口不能创建对象（接口更加彻底的抽象）
一个类实现多个接口，多个接口中有同样的静态方法不冲突（接口的静态方法不能被对象调用，只能使用类名，即接口名调用）
一个类继承了父类，同时又实现了接口，父类中和接口中有同名方法，默认用父类的（class Cat extends Animal implements Food{}）
一个类实现了多个接口，多个接口中存在同名的默认方法，不冲突，这个类重写该方法即可（本来应该是冲突的，但是重写后只会调用自己的）
一个接口继承多个接口，是没有问题的，如果多个接口中存在规范冲突则不能多继承（接口内部抽象方法重名等冲突）

