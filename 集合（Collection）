
集合和数组都是容器。

数组定义完成并启动后，类型确定、长度固定。
在进行增删数据操作的时候，数组是不太合适的，增删数据都需要放弃原有数组或者移位。

数组适合的场景：
当业务数据的个数是固定的，且都是同一批数据类型的时候，可以采取定义数组存储。

集合是Java中存储对象数据的一种容器。
集合的大小不固定，启动后可以动态变化，类型也可以选择不固定。
集合更像气球。集合非常适合做元素的增删操作。
注意:集合中只能存储引用类型数据，如果要存储基本类型数据可以选用包装类。

集合适合的场景：
数据的个数不确定，需要进行增删元素的时候。



集合类体系结构：
Collection单列：
        collection单列集合，每个元素（数据）只包含一个值。
Map双列：
        Map双列集合，每个元素包含两个值（键值对)。

Collection集合特点：
        List系列集合:添加的元素是有序、可重复、有索引。
                ArrayList. LinekdList :有序、可重复、有索引。
        Set系列集合:添加的元素是无序、不重复、无索引。
                HashSet:无序、不重复、无索引; LinkedHashSet:有序、不重复、无索引。
                TreeSet:按照大小默认升序排序、不重复、无索引。

集合对于泛型的支持：
        集合都是支持泛型的，可以在编译阶段约束集合只能操作某种数据类型
        collection<string> lists = new ArrayList<string>( );
        collection<String> lists = new ArrayList<>();// JDK 1.7开始后面的泛型类型申明可以省略不写
注意∶集合和泛型都只能支持引用数据类型，不支持基本数据类型，所以集合中存储的元素都认为是对象。（可以使用包装类来代替基本类型）



Collection集合
Collection是单列集合的祖宗接口，它的功能是全部单列集合都可以继承使用的。

Collection集合常用API：

public boolean add(E e)              把给定的对象添加到当前集合中；
public void clear()                   清空集合中所有的元素；
public boolean remove(E e)           把给定的对象在当前集合中删除；
public boolean contains(Object obj)  判断当前集合中是否包含给定的对象；
public boolean isEmpty()             判断当前集合是否为空；
public int size()                     返回集合中元素的个数。
public Object[] toArray()             把集合中的元素，存储到数组中



迭代器遍历概述：
        遍历就是一个一个的把容器中的元素访问一遍。
        迭代器在Java中的代表是lterator，迭代器是集合的专用遍历方式。

Collection集合获取迭代器：
        Iterator<E> iterator()          返回集合中的迭代器对象，该迭代器对象默认指向当前集合的0索引

Iterator中的常用方法：
boolean hasNext( )           询问当前位置是否有元素存在，存在返回true ,不存在返回false
E next()                      获取当前位置的元素，并同时将迭代器对象移向下一个位置，注意防止取出越界。
例如：
        Iterator<String> it = lists.iterator( );
        while(it.hasNext()){
             String ele=it.next();
             System.out.println(ele);
        }
        若越界会出现NoSuchElementException异常。



增强for循环：
增强for循环:既可以遍历集合也可以遍历数组。
它是JDK5之后出现的，其内部原理是一个lterator迭代器，遍历集合相当于是迭代器的简化写法。
实现lterable接口的类才可以使用迭代器和增强for，Collection接口已经实现了lterable接口。

格式：
for(元素数据类型 变量名∶数组或者Collection集合){
       //在此处使用变量即可，该变量就是元素
}
例如：
 Collection<String> list = new ArrayList<>();
...
for(String ele : list){
        System.out.println(ele);
}
；





Lambda表达式遍历集合：
得益于JDK 8开始的新技术Lambda表达式，提供了一种更简单、更直接的遍历集合的方式。

Collection结合Lambda遍历的API：
default void forEach(Consumer< ? super T> action);        结合lambda遍历集合；

Collection<String> lists = new ArrayList<>();
lists.forEach(new Consumer<String>(){
@override
public void accept(String s){
        System.out.println(s);
        }
});

lists.forEach(s -> {
        System.out.println(s);
});
//lists.forEach(s -> System.out.println(s));
//lists.forEach(System.out::println);

集合中存储的是元素对象的地址
