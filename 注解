

注解概述、作用
        Java注解(Annotation)又称Java标注，是JDK5.0引入的一种注释机制。
        Java语言中的类、构造器、方法、成员变量、参数等都可以被注解进行标注。

public class UserServiceTest {
        @Test
        public void testLogin(){
        }
        @Test
        public void testChu(){
        }
}

注解的作用是什么呢?
        对Java中类、方法、成员变量做标记，然后进行特殊处理，至于到底做何种处理由业务需求来决定。
        例如:JUnit框架中，标记了注解@Test的方法就可以被当成测试方法执行，而没有标记的就不能当成
        测试方法执行。




自定义注解---格式
        自定义注解就是自己做一个注解来使用。

public @interface 注解名称{
        public 属性类型 属性名()default 默认值;
}

代码：

public @interface HyBook {
    String name();
    String[] authors();
    double price();
}

@MyBook(name="《精通JavaSE》" , authors = {"黑马"，"dlei"} , price = 199.5)


特殊属性
        value属性，如果只有一个value属性的情况下，使用value属性的时候可以省略value名称不写!!
        但是如果有多个属性，且多个属性没有默认值，那么value名称是不能省略的

代码：
public @interface Book {
    String value(); //特殊属性
    // double price() default 9.9   必须有默认值才能写成下述代码
}

@Book (" /delete" )




元注解
        元注解:就是注解注解的注解。

元注解常见的有两个：
        @Target： 约束自定义注解只能在哪些地方使用,
        @Retention：申明注解的生命周期


@Target中可使用的值定义在ElementType枚举类中，常用值如下
        TYPE，类，接口
        FIELD,成员变量
        METHOD,成员方法
        PARAMETER,方法参数
        CONSTRUCTOR,构造器
        LOCAL_VARIABLE,局部变量

@Retention中可使用的值定义在RetentionPolicy枚举类中，常用值如下
        SOURCE:注解只作用在源码阶段，生成的字节码文件中不存在
        CLASS:注解作用在源码阶段，字节码文件阶段，运行阶段不存在，默认值.
        RUNTIME︰注解作用在源码阶段，字节码文件阶段，运行阶段（开发常用)



代码：
        @Target({ElementType.METHOD,ElementType.FIELD})
        @Retention(RetentionPolicy.RUNTIME)
        public @interface MyTest {
        }
        此时，MyTest 只能注释方法和成员变量



注解的解析：
       注解的操作中经常需要进行解析，注解的解析就是判断是否存在注解，存在注解就解析出内容。


 与注解解析相关的接口：
                Annotation:注解的顶级接口，注解都是 Annotation类型的对象
                AnnotatedElement:该接口定义了与注解解析相关的解析方法

方法：
Annotation[] getDeclaredAnnotations()
获得当前对象上使用的所有注解，返回注解数组。

T getDeclaredAnnotation(Class<T> annotationClass)
根据注解类型获得对应注解对象；

boolean isAnnotationPresent(Class<Annotation> annotationClass)
判断当前对象是否使用了指定的注解，如果使用了则返回true，否则false

所有的类成分Class,Method , Field , Constructor，都实现了AnnotatedElement接口他们都拥有解析注解的能力:




解析注解的技巧
        注解在哪个成分上，我们就先拿哪个成分对象。
        比如注解作用成员方法，则要获得该成员方法对应的Method对象，再来拿上面的注解
        比如注解作用在类上，则要该类的Class对象，再来拿上面的注解
        比如注解作用在成员变量上，则要获得该成员变量对应的Field对象，再来拿上面的注解


代码：

public class AnnotationDemo3 {
    @Test
    public void parseclass(){
        // a.先得到类对象
        Class c = BookStore.class;
        Method m = c.getDeclaredMethod("test" ) ;
        // b.判断这个类上面是否存在这个注解
        if(c.isAnnotationPresent(Bookk.class)) {
            //c.直接获取该注解对象
            Bookk book = (Bookk) c.getDeclaredAnnotation(Bookk.class);
            System.out.println(book.value());
            System.out.println(book.price());
            System.out.println(Arrays.toString(book.author()));
        }
    }
}




@Bookk(value = "《情深深雨濠濠》"，price = 99.9，author = {"琼瑶"，"dlei"))
class BookStore {
    @Bookk(value = "《三少爷的剑》"，price = 399.9, author = {"古龙"，"熊耀华"})
    public void test() {
    }
}




注解的应用场景一: junit框架：
需求：
        定义若干个方法，只要加了MyTest注解，就可以在启动时被触发执行
分析：
        定义一个自定义注解MyTest，只能注解方法，存活范围是一直都在。
        定义若干个方法，只要有@MyTest注解的方法就能在启动时被触发执行，没有这个注解的方法不能执行。


代码：

public class AnnotationDemo4 {
    @MyTest
    public void test1(){
        System.out.println("===test1===");
    }
    public void test2(){
        System.out.println("===test2===");
    }
    @MyTest
    public void test3(){
        System.out.println("===test3===");
    }

    //启动菜单:有注解的才被调用。
    public static void main(String[ ] args) {
        Class c = AnnotationDemo4.class;
        Method[] methods = c.getDeclaredMethods();
        for (Method method : methods) {
            if(method.isAnnotationPresent(MyTest.class)){
                method.invoke(t);
            }
        }
    }

