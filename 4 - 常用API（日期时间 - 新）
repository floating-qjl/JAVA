
从Java 8开始，java.time包提供了新的日期和时间API，主要涉及的类型有:
        LocalDate:不包含具体时间的日期。
        LocalTime：不含日期的时间。
        Loca1DateTime:包含了日期及时间。
        Loca1DateTime：包含了日期及时间。
        Instant:代表的是时间戳。
        DateTimeFormatter用于做时间的格式化和解析的Duration:用于计算两个“时间”间隔
        Period:用于计算两个“日期”间隔

新增的API严格区分了时刻、本地日期、本地时间，并且，对日期和时间进行运算更加方便。
其次，新api的类型几乎全部是不变类型(和字符串的使用类似)，可以放心使用不必担心被修改。

LocalDate、LocalTime、LocalDateTime：
他们分别表示日期，时间，曰期时间对象，他们的类的实例是不可变的对象。
他们三者构建对象和API都是通用的

构建对象的方式如下：
public static Xxxx now();       静态方法，根据当前时间创建对象
public static Xxxx of(...)      静态方法，指定日期/时间创建对象

LocalDateTime的转换API：
public LocalDate toLocalDate()         转换成一个LocalDate对象。
public LocalTime toLocalTime()         转换成一个LocalTime对象。

修改相关的API：
LocalDateTime综合了LocalDate和LocalTime里面的方法，所以下面只用LocalDate和LocalTime 来举例。
这些方法返回的是一个新的实例引用，因为LocalDateTime , LocalDate 、 LocalTime都是不可变的。


方法名                                               说明
plusDays,plusWeeks,plusMonths,plusYears          向当前 LocalDate 对象添加几天、几周、几个月、几年
minusDays,minusWeeks,minusMonths,minusYears      从当前 LocalDate 对象减去几天、几周、几个月、几年
withDayMonth,withDayOfYear,withMonth,withYear    将月份天数、年份天数、月份、年份修改为指定的值并返回新的LocalDate对象
isBefore,isAfter                                 比较两个 LocalDate




Instant时间戳：
JDK8获取时间戳特别简单，且功能更丰富。Instant类由一个静态的工厂方法now()可以返回当前的时间戳
        Instant st = Instant.now();
时间戳是包含日期和时间的，与java.util.Date很类似，事实上Instant就是类似JDK8以前的Date
Instant和Date这两个类可以进行转换
        Date date = Date.from(instant);
        instant = date.toInstant();

DateTimeFormatter概述：
在JDK8中，引入了一个全新的日期与时间格式器DateTimeFormatter.
正反都能调用format方法。


Period概述：
在Java8中，我们可以使用以下类来计算日期间隔差异: java.time.Period
主要是Period类方法getYears()，getMonths()和getDays()来计算,只能精确到年月日。
用于LocalDate之间的比较。

period.between(LocalDate a,LocalDate b);    第二个参数减去第一个参数
period.getYears();
period.getMonths();
period.getDays();



Duration概述：
在Java8中，我们可以使用以下类来计算时间间隔差异: java.time.Duration提供了使用基于时间的值测量时间量的方法。
用于LocalDateTime 之间的比较。也可用于Instant 之间的比较。

Duration duration = Duration.between(birthDate，today);//第二个参数减第一个参数
System.out.println(duration.toDays());//两个时间差的天数
System.out.println(duration.toHours());//两个时间差的小时数
System.out.println(duration.toMinutes());//两个时间差的分钟数
System.out.println(duration.toMillis());//两个时间差的毫秒数
System.out.println(duration.toNanos());//两个时间差的纳秒数


Duration:用于计算两个“时间”间隔。
Period:用于计算两个“日期”间隔。




java.time.temporal.ChronoUnit
chronoUnit类可用于在单个时间单位内测量一段时间，这个工具类是最全的了，可以用于比较所有的时间单位

system.out.println("相差的年数:" + ChronoUnit.YEARS.betweeg(birthDate,today));
system.out.println("相差的月数:" + ChronoUnit.MONTHS.between(birthDate,today));
system.out.println("相差的周数:" + ChronoUnit.WEEKS.between(birthDate,today) );
system.out.println("相差的天数:" + ChronoUnit.DAYS.between(birthDate,today) );
system.out.println("相差的时数:" + Chronounit.HoURs.between(birthDate,today) );
system.out.println("相差的分数:" + ChronoUnit.HINUTES.between(birthDate,today));
system.out.println("相差的秒数:" + ChronoUnit.SECONDs.between(birthDate,today));
system.out.println("相差的毫秒数:" + ChronoUnit.MILLIS.between(birthDate,today));
system.out.println("相差的微秒数:" + ChronoUnit.MICROS.between(binthDate,today));
System.out.println("相差的纳秒数:" + ChronoUnit.NANOs.between(birthDate,today));
System.out.println("相差的半天数:" + ChronoUnit.HALF_DAYs.between(birthDate,today));
system.out.println("相差的十年数:" + ChronoUnit.DECADES.between(birthDate,today));
system.out.println("相差的世纪（百年）数:" + ChronoUnit.CENTURIES.between(birthDate,today));
system.out.println("相差的千年数:" + ChronoUnit.NILLENNIA.between(birthDate,today));
system.out.println("相差的纪元数:" + ChronoUnit.ERAS.between(birthDate,today));

