

List系列集合特点：
ArrayList、LinekdList:有序，可重复，有索引。
        有序:存储和取出的元素顺序一致
        有索引:可以通过索引操作元素
        可重复:存储的元素可以重复

List集合特有方法：
        List集合因为支持索引，所以多了很多索引操作的独特api，其他Collection的功能List也都继承了。
List<String> lists = new ArrayList<>();

void add(int index,E element)       在此集合中的指定位置插入指定的元素
E remove(int index)                  删除指定索引处的元素，返回被删除的元素
E set(int index,E element)           修改指定索引处的元素，返回被修改的元素
E get(int index)                     返回指定索引处的元素


List集合的遍历方式：
迭代器
增强for循环
Lambda表达式
for循环（因为List集合存在索引)

ArrayList集合底层原理：
        ArrayList底层是基于数组实现的:根据索引定位元素快，增删需要做元素的移位操作。
        第一次创建集合并添加第一个元素的时候，在底层创建一个默认长度为10的数组。




LinkedList的特点：
        底层数据结构是双链表，查询慢，首尾操作的速度是极快的，所以多了很多首尾操作的特有API。

LinkedList集合的特有功能：
public void addFirst(E e)          在该列表开头插入指定的元素；
public void addLast(E e)           将指定的元素追加到此列表的末尾；
public E getFirst()                 返回此列表中的第一个元素；
public E getLast()                  返回此列表中的最后一个元素；
public E removeFirst()              从此列表中删除并返回第一个元素；
public E removeLast()               从此列表中删除并返回最后一个元素；

// LinkedList可以完成队列结构，和栈结构(双链表)//栈
        LinkedList<string> stack = new LinkedList<>();压栈，入栈。
        stack.addFirst( e:"第1颗子弹");
        stack.addFirst( e:"第2颗子弹");
        stack.addFirst( e:"第3颗子弹");
        stack.addFirst( e:"第4颗子弹"");
        System.out.println(stack);出栈弹栈
        System.out.println(stack.removeFirst());
        System.out.println(stack.removeFirst());
        System.out.println(stack.removeFirst());
        System.out.println(stack);

//队列
        LinkedList<String> queue = new LinkedList<>();/ /入队
        queue.addLast(e:"1号");
        queue.addLast(e:"2号")；
        queue.addLast(e:"3号");
        queue.addLast(e:"4号");
        System.out.println(queue);//出队
        System.out.println(queue.removeFirst());
        System.out.println(queue.removeFirst());
        System.out.println(queue.removeFirst());
        System.out.println(queue) ;



当我们从集合中找出某个元素并删除的时候可能出现一种并发修改异常问题。
        迭代器遍历集合且直接用集合删除元素的时候可能出现。（使用迭代器删除当前位置的元素，保证不后移，才能够成功遍历到全部元素）
        增强for循环遍历集合且直接用集合删除元素的时候可能出现。

        迭代器遍历集合但是用迭代器自己的删除方法操作可以解决。
        使用for循环遍历并删除元素不会存在这个问题。（倒序删除）

