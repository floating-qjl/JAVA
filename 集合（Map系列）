


Map集合概述和使用:
        Map集合是一种双列集合，每个元素包含两个数据。
        Map集合的每个元素的格式: key=value(键值对元素)。
        Map集合也被称为“键值对集合”

Map集合整体格式:
        Collection集合的格式:[元素1,元素2,元素3..]
        Map集合的完整格式:{ key1=value1 , key2=value2 , key3=value3 ， ...}

Map集合非常适合做类购物车这样的业务场景。


Map集合体系特点：
        Map集合的特点都是由键决定的。
        Map集合的键是无序,不重复的，无索引的，值不做要求（可以重复)。
        Map集合后面重复的键对应的值会覆盖前面重复键的值。
        Map集合的键值对都可以为null。


        使用最多的Map集合是HashMap。
        重点掌握HashMap , LinkedHashMap , TreeMap。其他的后续理解。

        Map<string，Integer> maps = new HashMap<>();//一行经典代码
        maps.put("鸿星尔克"，3);
        maps.put("Java",1);
        maps.put("枸杞"，100);
        maps.put("Java", 100);//覆盖前面的数据maps.put(null,null);
        system.out.println(maps);





Map集合实现类特点：
        HashMap:元素按照键是无序，不重复，无索引，值不做要求。(与Map体系一致)
        LinkedHashMap:元素按照键是有序，不重复，无索引，值不做要求。
        TreeMap:元素按照建是排序，不重复，无索引的，值不做要求。


Map集合：
        Map是双列集合的祖宗接口，它的功能是全部双列集合都可以继承使用的。

Map API如下：
        v put(K key,v value)                       添加元素
        maps.put("手表"，10) ;

        public V get(Object key);                  根据键获取对应值（无对应键则返回 null）
        Integer key = maps.get("huawei"");

        remove(object key)                         根据键删除键值对元素，返回键对应的值
        maps . remove( key: "iphonex").

        void clear()                               移除所有的键值对元素
        maps .clear();

        boolean containsKey(object key)           判断集合是否包含指定的键，包含则返回 true
        system.out.println(maps.containsKey(""));

        boolean containsValue(Object value)       判断集合是否包含指定的值
        System.out.println(maps.containsValue(100) ;

        boolean isEmpty()                         判断集合是否为空
        System.out.println(maps.isEmpty());

        int size()                                 集合的长度，也就是集合中键值对的个数
        system.out.println(maps.size());

        public Set<K> keySet()                    获取全部键的集合；
        Set<string> keys = maps.keySet()；

        Collection<V> values()；                   获取全部值的集合
        collection<Integer> values = maps.values()；
        System.out.println(values);

合并其他Map集合：
        Map<String , Integer> map1 = new HashMap<>();
        map1.put( "java1",1);
        map1.put("javaa"， 100);
        Map<String , Integer> map2 = new HashMap<>();
        map2.put("java2"，1);
        map2.put("java3"，100);
        map1.putAll(map2); //把集合map2的元素拷贝一份到map1中去
        system.out.println(map1);
        system.out.println(map2);


遍历Map集合方式一:键找值
        先获取Map集合的全部键的Set集合。
        遍历键的Set集合，然后通过键提取对应值。

        Set<K> keySet()            获取所有键的集合；
        V get(Object key)          根据键获取值；

        set<String> keys = maps.keySet();
        for (string key : keys){
            int value = maps.get(key)；
            system.out.println(key+"===>" + value);
        }


遍历Map集合方式二:键值对（Map本身的键和值没有类型）
        先把Map集合转换成Set集合，Set集合中每个元素都是键值对实体类型了。
        遍历Set集合，然后提取键以及提取值。

        Set<Map.Entry<K,V> > entrySet()      获取所有键值对对象的集合；
        K getKey()                           获得键
        v getValue()                         获取值

使用foreach遍历map集合.发现Map集合的键值对元素直接是没有类型的。所以不可以直接foreach遍历集合。
可以通过调用Map的方法 entrySet把Map集合转换成Set集合形式

        Set<Map.Entry<string,Integer>> entries = maps.entrySet();
        for(Map.Entry<String,Integer> entry : entries){
        String key = entry.getKey();
        int value = entry.getValue() ；
        System.out.println(key + "====>" + value);
        }




Map集合的遍历方式三: Lambda
        得益于JDK 8开始的新技术Lambda表达式，提供了一种更简单、更直接的遍历集合的方式。

Map结合Lambda遍历的API
        default void forEach(BiConsumer< ? super K,? super V> action)           结合lambda遍历Map集合；

流程：
        maps = {huawei=1000,手表=10,生活用品=10, iphoneX=100}

        maps.forEach((K , V)->{
          System.out.println(K +"----->" + V);
        });

代码：
        maps.forEach(new Biconsumer<String，Integer>() {
            @Override
            public void accept(String key, Integer value) {
            System.out.println(key + "--->" + value );
            }
        });
        maps.forEach((k, v) -> { System.out.println(k + "--->" + v);});




HashMap的特点：
        HashMap是Map里面的一个实现类。特点都是由键决定的:无序、不重复、无索引
        没有额外需要学习的特有方法，直接使用Map里面的方法就可以了。
        HashMap跟HashSet底层原理是一模一样的，都是哈希表结构，只是HashMap的每个元素包含两个值而已。

        实际上:Set系列集合的底层就是Map实现的，只是Set集合中的元素只要键数据，不要值数据而已。
        public HashSet() {
        map = new HashMap<>()；
        )
        依赖hashCode方法和equals方法保证键的唯一。
        如果键要存储的是自定义对象，需要重写hashCode和equals方法。
        基于哈希表。增删改查的性能都较好。




LinkedHashMap集合概述和特点
        由键决定:有序、不重复、无索引。
        这里的有序指的是保证存储和取出的元素顺序一致
        原理:底层数据结构是依然哈希表，只是每个键值对元素又额外的多了一个双链表的机制记录存储的顺序。

TreeMap集合概述和特点
        由键决定特性:不重复、无索引、可排序
        可排序:按照键数据的大小默认升序（有小到大）排序。只能对键排序。
        注意:TreeMap集合是一定要排序的，可以默认排序，也可以将键按照指定的规则进行排序
        TreeMap跟TreeSet一样底层原理是一样的。

TreeMap集合自定义排序规则有2种：
        类实现Comparable接口，重写比较规则。
        集合自定义Comparator比较器对象，重写比较规则。


