

IO流概述：
        IO流也称为输入、输出流，就是用来读写数据的。
        I表示intput，是数据从硬盘文件读入到内存的过程，称之输入，负责读。
        O表示output，是内存程序的数据从内存到写出到硬盘文件的过程，称之输出，负责写。

总结流的四大类:
        字节输入流:以内存为基准，来自磁盘文件/网络中的数据以字节的形式读入到内存中去的流称为字节输入流。
        字节输出流:以内存为基准，把内存中的数据以字节写出到磁盘文件或者网络中去的流称为字节输出流.
        字符输入流:以内存为基准，来自磁盘文件/网络中的数据以字符的形式读入到内存中去的流称为字符输入流。
        字符输出流:以内存为基准，把内存中的数据以字符写出到磁盘文件或者网络介质中去的流称为字符输出流。

IO流的作用?
        读写文件数据的


文件字节输入流:FilelnputStream
        作用:以内存为基准，把磁盘文件中的数据以字节的形式读取到内存中去。

public FilelnputStream(File file)               创建字节输入流管道与源文件对象接通；
public FilelnputStream(String pathname)         创建字节输入流管道与源文件路径接通；

public int read()                               每次读取一个字节返回，如果字节已经没有可读的返回-1
public int read(byte[] buffer)                  每次读取一个字节数组返回，如果字节已经没有可读的返回-1

代码：
        InputStream is = new FileInputStream("file-io-app\\src\\data.txt");
        int b1 = is.read();
        System.out.println((char)b1);
当超出文件最后一个字节时，返回-1

每次读取一个字节存在什么问题?
        性能较慢
        读取中文字符输出无法避免乱码问题。



代码：
        InputStream is = new FileInputStream("file-io-app/src/data02.txt");
        byte[] buffer = new byte[3];
        int len = is.read(buffer);
        System.out.println("读取了几个字节:" + len);
        //String rs = new String(buffer);
        String rs2 = new String(buffer, 0 ,len2);
                                    下标为0开始，读取 len2 个字节
        System.out.println(rs);


每次读取一个字节数组存在什么问题?
        读取的性能得到了提升
        读取中文字符输出无法避免乱码问题。


如何正确读取中文字符：
方式一：
        自己定义一个字节数组与文件的大小一样大，然后使用读取字节数组的方法，一次性读取完成。
        public int read(byte[] buffer)                  每次读取一个字节数组返回，如果字节已经没有可读的返回-1

代码：
        File f = new File("file-io-app/src/data03.txt");
        InputStream is = new FileInputStream(f);
        byte[] buffer = new byte[(int) f.length()];
        int len = is.read(buffer);
        System.out.println("读取了多少个字节:" + len);
        System.out.println("文件大小:" +f.length()) ;
        System.out.println(new String(buffer)) ;



方式二：
        官方为字节输入流InputStream提供了如下API可以直接把文件的全部数据读取到一个字节数组中
        public byte[] readAllBytes() throws IOException            直接将当前字节输入流对应的文件对象的字节数据装到一个字节数组返回


代码：
        byte[] buffer = is.readAllBytes();
        System.out.println(new String(buffer));

直接把文件数据全部读取到一个字节数组可以避免乱码，是否存在问题?
        如果文件过大，定义的字节数组可能引起内存溢出。






文件字节输出流:FileOutputStream
        作用:以内存为基准，把内存中的数据以字节的形式写出到磁盘文件中去的流。

构造器：
public FileOutputStream(File file)                              创建字节输出流管道与源文件对象接通；
public FileOutputStream(File file, boolean append)             创建字节输出流管道与源文件对象接通，可追加数据
public FileOutputstream(String filepath)                        创建字节输出流管道与源文件路径接通；
public FileOutputStream(String filepath,boolean append)        创建字节输出流管道与源文件路径接通，可追加数据


API：
public void write(int a)                                      写一个字节出去
public void write(byte[ ] buffer)                             写一个字节数组出去
public void write(byte[ ] buffer , int pos , int len)        写一个字节数组的一部分出去。

流的关闭与刷新：
        flush()                 刷新流，还可以继续写数据
        close()                 关闭流，释放资源，但是在关闭之前会先刷新流。一旦关闭，就不能再写数据

作用：使写出去的数据成功生效

代码：
        OutputStream os = new FileOutputStream("file-io-app/src/out04.txt");
        //outputStream os = new FileOutputStream("file-io-app/src/out04", true);
        os.write('a');
        os.write(98);
        os.write('徐');//写中文会乱码
        os.write("\r\n".getBytes());//输出换行

        byte[] buffer = {'a',97,98,99};
        os.write(buffer);
        byte[] buffer2 ="我是中国人".getBytes();
        os.write(buffer2);

        byte[] buffer3 = {'a',97，98，99};
        os.write(buffer3, 0, 3);




文件拷贝：
    拷贝视频：
        try{
        //1、创建一个字节输入流管道与原视频接通
        InputStream is = new FileinputStream("D:\\course\\基础加强l|dayG8-日志框架、阶段项目\\视频\\16、用户购票功能.avi");
        //2、创建一个字节输出流管道与目标文件接通
        OutputStream os = new FileOutputStream("D:\\course\\new.avi");
        //3、定义一个字节数组转移数据
        byte[] buffer=new byte[1024];
        int len; //记录每次读取的字节数。
        while((len = is.read(buffer)) != -1){
            os.write(buffer,0 ,len);
        }
        System.out.println("复制完成了!");
        //4、关闭流。
        os.close();
        is.close();
        }catch(Exception e){
        e.printStackTrace();
        }

字节流适合做一切文件数据的拷贝吗?
        任何文件的底层都是字节，拷贝是一字不漏的转移字节，
        只要前后文件格式、编码一致没有任何问题。




资源释放的方式：

os.close();仅是上述代码这种方式，如果中间出现差错，则会导致所有资源都无法关闭


try-catch-finally：
        finally:在异常处理时提供finally块来执行所有清除操作，比如说IO流中的释放资源
        特点:被finally控制的语句最终一定会执行，除非JVM退出
        异常处理标准格式: try....catch...finally

try-catch-finally格式：
        try {
            FileOutputStream fos = new FileOutputStream("a.txt");
            fos.write(97);
            fos.close();
        } catch ( IOException e) {
             e.printStackTrace();
        }finally{

        }

修改代码：
        哪怕上面有return语句执行，也必须先执行完 finally 才可以!
        开发中不建议在 finally 加return ,如果加了，返回的永远是这里的数据了，这样会出问题!
        
        finally {
            //无论代码是正常结束，还是出现异常都要执行这里
            System.out.println("========finally========");
            try{
            //4、关闭流。
                if(os != null) os.close();
            }catch (Exception e) {
                e.printStackTrace();
            }
            try {
                if(is != null) is.close();
            }catch (IOException e) {
                e.printStackTrace();
            }
        }



JDK7和JDK9中都简化了资源释放操作:
上述代码为基本做法
        手动释放资源

JDK7改进：
        try(定义流对象){
            可能出现异常的代码;
        }catch(异常类名变量名){
            异常的处理代码;
        }

            资源用完最终自动释放

代码：
        try (
        //这里面只能放置资源对象，用完会自动关闭:自动调用资源对象的close方法关闭资源（即使出现异常也会做关闭操作)
        //1、创建一个字节输入流管道与原视频接逦
        InputStream is = new FileInputStream("file-io-app/src/out04.txt");
        //2、创建一个字节输出流管道与目标文件接通
        OutputStream os = new FileOutputStream("file-io-app/src/out05.txt");
        //里面只能放资源对象，不然会报错，即继承接口AutoCloseable
        ){
        //3、定义一个字节数组转移数据
            byte[] buffer = new byte[1024];
            int len; //记录每次读取的字节数。
            while ((len = is.read(buffer)) != -1){
                os.write(buffer,0,len);
            }
        System.out.println("复制完成了! ");
        }catch (Exception e){
            e.printStackTrace();
        }


JDK9改进方案：
        定义输入流对象;定义输出流对象;
        try(输入流对象;输出流对象){
        可能出现异常的代码;
        }catch(异常类名变量名){
        异常的处理代码;
        }

        资源用完最终自动释放


代码：
        InputStream is = new FileInputstream("file-io-app/src/out04.txt");
        //2、创建一个字节输出流管道与目标文件接通
        outputStream os = new FileOutputStream("file-io-app/src/out05.txt");
        try ( is ; os ) {
        // 3、定义一个字节数组转移数据
        byte[] buffer = new byte[1024];
        int len; //记录每次读取的字节数。
        while ((len = is.read(buffer)) != -1){
            os.write(buffer,0 , len);
        }
        System.out.println("复制完成了!");
        }catch (Exception e){
            e.printStackTrace();
        }
//不建议使用






字节流读取中文输出可能会存在什么问题?
        会乱码。或者内存溢出。
读取中文输出，哪个流更合适，为什么?
        字符流更合适，最小单位是按照单个字符读取的。



文件字符输入流: Reader
        作用:以内存为基准，把磁盘文件中的数据以字符的形式读取到内存中去。

构造器：
public FileReader(File file)            创建字符输入流管道与源文件对象接通；
public FileReader(String pathname)      创建字符输入流管道与源文件路径接通；

API：
public int read()                       每次读取一个字符返回，如果字符已经没有可读的返回-1
public int read(char[] buffer)          每次读取一个字符数组，返回读取的字符个数 如果字符已经没有可读的返回-1


代码：
        Reader fr = new FileReader("file-io-appllsrc\\data06.txt");
        //2、读取一个字符返回，没有可读的字符了返回-1
        int code = fr.read();
        System.out.print((char)code);
        int code1 = fr.read();
        System.out.print((char)code1);

字符流的好处，每次读取一个字符存在什么问题?
        读取中文字符不会出现乱码（如果代码和文件编码一致)
        性能较慢


代码：
        Reader fr = new FileReader("file-io-app/src/data07.txt");
        //2、用循环，每次读取一个字符数组的数据
        char[] buffer = new char[1024];// 1K字符
        int len;
        while ((len = fr.read(buffer)) != -1) {
            String rs = new String(buffer, 0, len);
            System.out.print(rs);
        }

每次读取一个字符数组的优势?
        读取的性能得到了提升





文件字符输入流：

文件字符输出流:FileWriter
        作用:以内存为基准，把内存中的数据以字符的形式写出到磁盘文件中去的流

构造器：
public Filewriter(File file)                               创建字符输出流管道与源文件对象接通；
public Filewriter(File file,boolean append)               创建字符输出流管道与源文件对象接通，可追加数据
public Filewriter(String filepath)                         创建字符输出流管道与源文件路径接通；
public Filewriter(String filepath,boolean append)         创建字符输出流管道与源文件路径接通，可追加数据


API：
        void write(int c)                                      写一个字符
        void write(char[] cbuf)                                写入一个字符数组
        void write(char[] cbuf, int off,int len)               写入字符数组的一部分
        void write(String str)                                 写一个字符串
        void write(String str, int off, int len)               写一个字符串的一部分
        void write(int c)                                      写一个字符


代码：
        Writer fw = new FileWriter("file-io-app/s/out08.txt");//覆盖管道，每次启动都会清空文件之前的数握
        Writer fw = new FileWriter("file-io-app/s/out08.txt",true);//追加数据，就不会直接覆盖了
        fw.write(98);
        fw.write('a');
        fw.write('徐');//不会出问题了
        fw.white("lrln");//换行

        fw.write("abc我是中国人");

        char[] chars = "abc我是中国人".toCharArray(O);
        fw.write(chars);

        fw.write("abc我是中国人", 0, 5);

        fw.write("abc我是中国人", 0, 5);

        fw.flush();//刷新后流可以继续使用
        fw.close();//关闭包含刷线，关闭后流不能使用


字节流、字符流如何选择使用?
        字节流适合做一切文件数据的拷贝（音视频，文本)
        字节流不适合读取中文内容输出
        字符流适合做文本文件的操作（读，写)



