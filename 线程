



什么是线程?
        线程(thread)是一个程序内部的一条执行路径。
        我们之前启动程序执行后，main方法的执行其实就是一条单独的执行路径。

        程序中如果只有一条执行路径，那么这个程序就是单线程的程序。


多线程是什么?
        多线程是指从软硬件上实现多条执行流程的技术。



多线程的创建：
        Java是通过java.lang.Thread类来代表线程的。
        按照面向对象的思想，Thread类应该提供了实现多线程的方式。


多线程的实现方案一:继承Thread类
        定义一个子类MyThread继承线程类java.lang.Thread，重写run()方法
        创建MyThread类的对象
        调用线程对象的start()方法启动线程（启动后还是执行run方法的)


代码：

public class File {
    public static void main(String[] args) {
        //new一个新线程对象
        Thread t = new MyThread();
        //调用start方法启动线程执行的还是run方法
        t.start();

        for (int i = 0; i < 5; i++) {
            System.out.println("主线程执行输出: " + i);
        }
    }
}

class MyThread extends Thread {
    //重写run方法，里面是定义线程以后要干啥
    @Override
    public void run() {
        for (int i = 0; i < 5; i++) {
            System.out.println("子线程执行输出:" + i);
        }
    }
}
同时执行，但是每次只能输出一个，因此每次输出的结果的顺序都不同

方式一优缺点:
        优点:编码简单
        缺点:线程类已经继承Thread，无法继承其他类，不利于扩展。

为什么不直接调用了run方法，而是调用start启动线程。
        直接调用run方法会当成普通方法执行，此时相当于还是单线程执行。
        只有调用start方法才是启动一个新的线程执行。

为什么不能把主线程放在子线程之前？
        这样主线程一直是先跑完的，相当于是一个单线程的效果了。




多线程的实现方案二:实现Runnable接口
        定义一个线程任务类MyRunnable实现Runnable接口，重写run()方法
        创建MyRunnable任务对象
        把MyRunnable任务对象交给Thread处理。
        调用线程对象的start()方法启动线程

Thread构造器：
public Thread(String name)                                    可以为当前线程指定名称；
public Thread(Runnable target)                                封装Runnable对象成为线程对象；
public Thread(Runnable target , String name )                 封装Runnable对象成为线程对象，并指定线程名称

代码：
public class File {
    public static void main(String[] args) {
        //创建一个任务对象
        Runnable target = new MyRunnable();

//        Runnable target = new Runnable( {
//        @Override
//        public void run() {
//            for (int i = 0; i < 10; i++) {
//                system.out.println("子线程执行输出:" + i);
//            }
//        }
//       };

        //把任务对象交给Thread处理
        Thread t = new Thread(target);
        //启动线程
        t.start();

//        new Thread(new Runnable() {
//            @Override
//            public void run() {
//                for (int i = 0; i < 10; i++) {
//                    System.out.println("子线程2执行输出: "+ i);
//                }
//            }
//        }).start();

//        new Thread(() -> {
//            for (int i = 0; i < 10; i++) {
//                System.out.println("子线程3执行输出:" + i);
//            }
//        }).start();


        for (int i = 0; i < 10; i++) {
            System.out.println("主线程执行输出: " + i);
        }
    }
}

class MyRunnable implements Runnable{
    //重写run方法，里面是定义线程以后要干啥
    @Override
    public void run() {
        for (int i = 0; i < 5; i++) {
            System.out.println("子线程执行输出:" + i);
        }
    }
}

方式二优缺点:
        优点:线程任务类只是实现接口，可以继续继承类和实现接口，扩展性强。
        缺点:编程多一层对象包装，如果线程有执行结果是不可以直接返回的。



前2种线程创建方式都存在一个问题:
        他们重写的run方法均不能直接返回结果。
        不适合需要返回线程执行结果的业务场景。

怎么解决这个问题呢?
        JDK 5.0提供了Callable和FutureTask来实现。
        这种方式的优点是:可以得到线程执行的结果。


多线程的实现方案三:利用Callable、FutureTask接口实现。
   得到任务对象:
        定义类实现Callable接口，重写call方法，封装要做的事情。
        用FutureTask把Callable对象封装成线程任务对象。
   把线程任务对象交给Thread处理。
   调用Thread的start方法启动线程，执行任务
   线程执行完毕后、通过FutureTask的get方法去获取任务执行的结果。

API：
public FutureTask<>(Callable call)               把Callable对象封装成FutureTask对象。
public V get() throws Exception                 获取线程执行call方法返回的结果。


        代码：
public class File {
    public static void main(String[] args) {
        //创建Callable任务对象
        Callable<String> call = new MyCallable(100);
        //把 Callable 任务对象交给 FutureTast 对象
        // FutureTast 对象的作用1：是Runnable的对象（实现了Runnable接口），可以交给Thread了
        // FutureTast 对象的作用2：可以在线程执行完毕之后通过调用其get方法得到线程执行完成的结果
        FutureTask<String> f1 = new FutureTask<>(call);
        //交给线程处理
        Thread t1 = new Thread(f1);
        //启动线程
        t1.start();

        Callable<String> call2 = new MyCallable(200);
        FutureTask<String> f2 = new FutureTask<>(call2);
        Thread t2 = new Thread(f2);
        t2.start();

        try {
            //如果f1任务没有执行完毕，这里的代码会等待，直到线程1跑完才提取结果。
            String rs1 = f1.get();
            System.out.println(rs1);
        } catch (Exception e) {
            e.printStackTrace();

            try {
                //如果f2任务没有执行完毕，这里的代码会等待，直到线程2跑完才提取结果。
                String rs2 = f1.get();
                System.out.println(rs2);
            } catch (Exception e1) {
                e1.printStackTrace();
            }
        }
    }
}

//定义一个任务类实现Callable接口﹑应该申明线程任务执行完毕后的结果的数据类型

class MyCallable implements Callable<String>{
    private int n;

    public MyCallable(int n) {
        this.n = n;
    }

    //重写call方法
    @Override
    public String call() throws Exception{
        int sum = 0;
        for (int i = 1; i <= n; i++) {
            sum+=i;
        }
        return "子线程结果：" + sum;
    }
}


方式三优缺点:
    优点:线程任务类只是实现接口，可以继续继承类和实现接口，扩展性强。
         可以在线程执行完毕后去获取线程执行的结果。
    缺点:编码复杂一点。






Thread常用API说明
        Thread常用方法:获取线程名称getName()、设置名称setName()、获取当前线程对象currentThread()。
        至于Thread类提供的诸如: yield、join、interrupt、不推荐的方法stop、守护线程、线程优先级等线程
        的控制方法，在开发中很少使用，这些方法会在高级篇以及后续需要用到的时候再为大家讲解。

当有很多线程在执行的时候，我们怎么去区分这些线程呢?
        此时需要使用Thread的常用方法:getName()、setName()、currentThread()等。


Thread获取和设置线程名称：
        String getName()                  获取当前线程的名称，默认线程名称是Thread-索引
        void setName(String name)        将此线程的名称更改为指定的名称，通过构造器也可以设置线程名称

Thread构造器：
public Thread(String name)                            可以为当前线程指定名称；
public Thread(Runnable target)                        封装Runnable对象成为线程对象；
public Thread(Runnable target , string name )         封装Runnable对象成为线程对象，并指定线程名称


代码：

        Thread t1 = new MyThread();
        //t1.setName("1号");
        //设置名字可以使用有参构造器送给父类
        t1.start();
        System.out.println(t1.getName());

        Thread t2 = new MyThread();
        //t2.setName("2号");
        t2.start();
        System.out.println(t2.getName());

        //哪个线程执行它，它就得到哪个线程对象（当前线程对象)
        //可以在重写方法时，使用下述方法，区别多个子线程
        //例如：System.out.println( Thread.currentThread().getName())
        Thread m = Thread.currentThread();
        System.out.println(m.getName());

        for(int i = 0;i < 5;；++i){
              System.out.println("main线程输出:“ + i);
        }


Thread类的线程休眠方法：
public static void sleep(long time)      让当前线程休眠指定的时间后再继续执行，单位为毫秒。

代码：
        Thread.sleep( millis: 3000);//静态方法可以直接使用类名调用





线程安全问题:
        多个线程同时操作同一个共享资源的时候可能会出现业务安全问题，称为线程安全问题。



线程同步:
        为了解决线程安全问题。

如何才能保证线程安全呢?
        让多个线程实现先后依次访问共享资源，这样就解决了安全问题

线程同步的核心思想
        加锁，把共享资源进行上锁，每次只能一个线程进入访问完毕以后解锁，然后其他线程才能进来。


同步代码块:
        作用:把出现线程安全问题的核心代码给上锁。
        原理:每次只能一个线程进入，执行完毕后自动解锁，其他线程才可以进来执行。

格式：
synchronized(同步锁对象){
        操作共享资源的代码(核心代码)
        }

锁对象要求：
        理论上:锁对象只要对于当前同时执行的线程来说是同一个对象即可。

//此为常量字符串，在内存中独一份，因此对于多个线程都是同一个对象
synchronized( "heima" ) {
        if(this.money >= money){
            System.out.println(name+"来取钱，吐出: " + money);//更新余额
            this.money -= money;
            System.out.println(name+"取钱后，余额剩余:" + this.money);
        }
        else{
            System.out.println(name+"来取钱，余额不足!")；
        }
}


锁对象用任意唯一的对象好不好呢?
        不好，会影响其他无关线程的执行。

锁对象的规范要求
        规范上:建议使用共享资源作为锁对象。
        对于实例方法建议使用this作为锁对象。
        对于静态方法建议使用字节码(类名.class)对象作为锁对象。

上述代码可以改为：
synchronized (this){}
//this == account 代表当前的账户类，是独自独立且唯一的







同步方法：
        作用:把出现线程安全问题的核心方法给上锁。
        原理:每次只能一个线程进入，执行完毕以后自动解锁，其他线程才可以进来执行。

格式：
        修饰符 synchronized 返回值类型方法名称（形参列表){
        操作共享资源的代码
        }

代码：
public synchronized void drawMoney(double money) {}


同步方法底层原理：
        同步方法其实底层也是有隐式锁对象的，只是锁的范围是整个方法代码。
        如果方法是实例方法:同步方法默认用this作为的锁对象。但是代码要高度面向对象!
        如果方法是静态方法:同步方法默认用类名.class作为的锁对象。


是同步代码块好还是同步方法好一点?
        同步代码块锁的范围更小，同步方法锁的范围更大。






Lock锁：
        为了更清晰的表达如何加锁和释放锁，JDK5以后提供了一个新的锁对象Lock，更加灵活.方便。
        Lock实现提供比使用synchronized方法和语句可以获得更广泛的锁定操作。
        Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来构建Lock锁对象。

方法：
public ReentrantLock()          获得Lock锁的实现类对象；

API：
        void lock()             获得锁；
        void unlock()           释放锁；

代码：
private final Lock lock = new ReentrantLock()；//唯一，不可替换

public void drawMoney(double money) {
        String name = Thread.currentThread( ).getName();// 2、判断余额是否足够
        lock.lock();//上锁
        try{
            if(this.money >= money){
                System.out.println(name+"来取钱，吐出:" + money) ;/更新余额
                this.money -= money;
                System.out.println(name+"取钱后，余额剩余:" + this.money);
            }else{
                System.out.println(name+"来取钱，余额不足!");
            }
        }finally{
            lock.unlock();//放在 finally 里面，防止死锁
        }
        }







什么是线程通信、如何实现?
        所谓线程通信就是线程间相互发送数据，线程通信通常通过共享一个数据的方式实现。
        线程间会根据共享数据的情况决定自己该怎么做，以及通知其他线程怎么做。

线程通信常见模型：
        生产者与消费者模型:生产者线程负责生产数据，消费者线程负责消费数据。
        要求:生产者线程生产完数据后，唤醒消费者，然后等待自己;消费者消费完该数据后，唤醒生产者，然后等待自己。

线程通信的前提:
        线程通信通常是在多个线程操作同一个共享资源的时候需要进行通信，且要保证线程安全。


Object类的等待和唤醒方法：
        void wait()                     让当前线程等待并释放所占锁，直到另一个线程调用notify()方法或notifyAll()方法
        void notify()                   唤醒正在等待的单个线程
        void notifyAll()                唤醒正在等待的所有线程

注意：
        上述方法应该使用当前同步锁对象进行调用。


代码：
public synchronized void drawHoney(double money) {
        try {
            String name = Thread.currentThread().getName();
            if(this.money >= money){
                this.money -= money;
                System.out.println(name +"来取钱"+money +"成功!余额是: "+ this.money);
                this.notifyAll(); //唤醒所有线程
                this.wait();//锁对象，让当前线程进入等待!
            }else {
            // 钱不够:不可取。
            // 唤醒别人，等待自己
                this.notifyAll(; //唤醒所有线程
                this.wait();//锁对象，让当前线程进入等待!
            }catch (Exception e){
                e.printStackTrace();
            }
        }
}







什么是线程池?
        线程池就是一个可以复用线程的技术。

不使用线程池的问题:
        如果用户每发起一个请求，后台就创建一个新线程来处理，下次新任务来了又要创建新线程，
        而创建新线程的开销是很大的，这样会严重影响系统的性能。


谁代表线程池?
        JDK 5.0起提供了代表线程池的接口: ExecutorService

如何得到线程池对象?
        方式一:使用ExecutorService的实现类ThreadPoolExecutor自创建一个线程池对象

ThreadPoolExecutor构造器的参数说明:
public ThreadPoolExecutor（int corePoolSize,
                           int maximumPoolSize,
                           long keepAliveTime,TimeUnjit unit,
                           BlockingQueue<Runnable> workQueue,
                           ThreadFactory threadFactory,
                           RejectedExecutionHandler handler)

        参数一:指定线程池的线程数量（核心线程): corePoolSize        不能小于0
        参数二:指定线程池可支持的最大线程数: maximumPoolsize        最大数量>=核心线程数量
        参数三:指定临时线程的最大存活时间: keepAliveTime            不能小于0
        参数四:指定存活时间的单位(秒、分、时、天): unit             时间单位 I
        参数五:指定任务队列: workQueue                              不能为null
        参数六:指定用哪个线程工厂创建线程: threadFactory            不能为null
        参数七:指定线程忙，任务满的时候，新任务来了怎么办:handler   不能为null

线程池常见面试题:
        临时线程什么时候创建啊?
            新任务提交时发现核心线程都在忙，任务队列也满了，并且还可以创建临时线程，此时才会创建临时线程。
        什么时候会开始拒绝任务?
            核心线程和临时线程都在忙，任务队列也满了，新的任务过来的时候才会开始任务拒绝。

ThreadPoolExecutor创建线程池对象示例：
        ExecutorService pools = new ThreadPoolExecutor(3,5,8,TimeUnit.SECONDS,new ArrayBlockingQueue<>(6),
                                  Executors.defaultThreadFactory() , new ThreadPoolExecutor.AbortPolicy());

ExecutorService的常用方法：
        void execute(Runnable command)               执行任务/命令，没有返回值,一般用来执行Runnable任务
        Future<T> submit(Callable<T> task)            执行任务，返回未来任务对象获取线程结果，一般拿来执行callable任务
        void shutdown()                              等任务执行完毕后关闭线程池
        List<Runnable> shutdownNow()                  立刻关闭，停止正在执行的任务，并返回队列中未执行的任务

新任务拒绝策略：
        ThreadPoolExecutor.AbortPolicy                    丢弃任务并抛出RejectedExecutionException异常。是默认的策略
        ThreadPoolExecutor.DiscardPolicy:                 丢弃任务，但是不抛出异常这是不推荐的做法
        ThreadPoolExecutor.Discard0ldestPolicy            抛弃队列中等待最久的任务然后把当前任务加入队列中
        ThreadPoolExecutor.callerRunsPolicy               由主线程负责调用任务的run()方法从而绕过线程池直接执行

Runnable 代码：
        ExecutorService pool = new ThreadPoolExecutor(corePoolSize: 3,maximumPoolSize: 5,
        keepAliveTime: 6,TimeUnit.SECONDS,new ArrayBlockingQueve<>( capacity 5)，Executors.defaultThreadFactory(),
        new ThreadPoolExecutor.AbortPolicy());

        //创建一个 Runnable 类，再定义对象
        Runnable target = new MyRunnable();
        //核心线程在忙
        pool.execute(target);
        pool.execute(target);
        pool.execute(target);
        //队列已满
        pool.execute(target);
        pool.execute(target);
        pool.execute(target);
        pool.execute(target);
        pool.execute(target);
        //创建临时线程，总共线程最大为5
        pool.execute(target);
        pool.execute(target);
        //不创建，拒绝策略被触发
        pool.execute(target);
        //关闭线程池（开发中一般不会使用)。
        pool.shutdownNow();//立即关闭，即使任务没有完成，会丢失任务的!

        pool.shutdown(); //会等待全部任务执行完毕之后再关闭
        //想要实行上述关闭代码，需要注释掉会报错（抛出异常）的新任务提交（拒绝策略）



Callable 代码：
        ExecutorService pool = new ThreadPoolExecutor(corePoolSize: 3,maximumPoolSize: 5,
        keepAliveTime: 6,TimeUnit.SECONDS,new ArrayBlockingQueve<>( capacity 5)，Executors.defaultThreadFactory(),
        new ThreadPoolExecutor.AbortPolicy());

        //给任务线程池处理，需要先创建 Mycallable 类，并传承接口( implements ) Callable<String>
        Future<String> f1 = pool.submit(new MyCallable(100))；
        Future<String> f2 = pool.submit(new MyCallable(200))；
        Future<String> f3 = pool.submit(new MyCallable(300))；
        Future<String> f4 = pool.submit(new MyCallable(400))；

//        String re = f1.get();
//        System.out.println(rs);

        System.out.println(f1.get());
        System.out.println(f2.get());
        System.out.println(f3.get());
        System.out.println(f4.get());

        方式二:使用Executors(线程池的工具类）调用方法返回不同特点的线程池对象

Executors得到线程池对象的常用方法
        Executors:线程池的工具类通过调用方法返回不同类型的线程池对象。

方法：
public static ExecutorService newCachedThreadPoo1()                线程数量随着任务增加而增加，如果线程任务执行完毕且空
                                                                     闲了一段时间则会被回收掉。
public static ExecutorService newFixedThreadPool(int nThreads)    创建固定线程数量的线程池，如果某个线程因为执行异常而
                                                                    结束，那么线程池会补充一个新线程替代它。
public static ExecutorService newSingleThreadExecutor ()          创建只有一个线程的线程池对象，如果该线程出现异常而结
                                                                    束，那么线程池会补充—个新线程。
public static scheduledExecutorService newScheduledThreadPool(int corePoolSize)    创建一个线程池，可以实现在给定的延迟后运行任务，
                                                                                     或者定期执行任务。

注意:Executors的底层其实也是基于线程池的实现类ThreadPoolExecutor创建线程池对象的。


代码：
        ExecutorService pool = Executors.newFixedThreadPool( nThreads: 3);
        pool.execute(new MyRunnable());
        pool.execute(new MyRunnable());
        pool.execute(new MyRunnable());
        pool.execute(new MyRunnable());//已经没有多余线程了，若上述线程未空闲，则不会执行

Executors使用可能存在的陷阱：
        大型并发系统环境中使用Executors如果不注意可能会出现系统风险。

public static ExecutorService newFixedThreadPool(int nThreads)
public static ExecutorService newSingleThreadExecutor()
错误：允许请求的任务队列长度是Integer.MAX_VALUE，可能出现OOM错误( java.lang.OutOfMemoryError )


public static ExecutorService newCachedThreadPool()
public static ScheduledExecutorService newScheduledThreadPool(int corePoolsize)
错误：创建的线程数量最大上限是Integer.MAX_VALUE,线程数可能会随着任务1:1增长，也可能出现OOM错误( ava.lang.OutOfMemoryError )

上述总结：任务多，线程多，占用内存多，若给出过多任务，则会超出内存，资源耗尽，系统错误，因此有风险


Executors是否适合做大型互联网场景的线程池方案?
        不合适。
        建议使用ThreadPoolExecutor来指定线程池参数，这样可以明确线程池的运行规则，规避资源耗尽的风险。


