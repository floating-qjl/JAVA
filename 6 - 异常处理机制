

什么是异常?
        异常是程序在“编译”或者“执行”的过程中可能出现的问题，注意:语法错误不算在异常体系中。
        比如:数组索引越界、空指针异常、日期格式化异常，等…

为什么要学习异常?
        异常一旦出现了，如果没有提前处理，程序就会退出JVM虚拟机而终止.
        研究异常并且避免异常，然后提前处理异常，体现的是程序的安全，健壮性。


Error:
        系统级别问题、JVM退出等，代码无法控制。

Exception: java.lang包下，称为异常类，它表示程序本身可以处理的问题
        RuntimeException及其子类:运行时异常，编译阶段不会报错。(空指针异常 数组索引越界异常)

运行时异常示例:
        数组索引越界异常:ArraylndexOutOfBoundsException
        int[] arr = {1，2，3};
        System.out.println(arr[3]);

        空指针异常:NullPointerException，直接输出没有问题，但是调用空指针的变量的功能就会报错。
        String name = null;
        System.out.println(name); ll null
        System.out.println(name.length());//运行出错，程序终止

        数学操作异常:ArithmeticException
        int c = 10 / 0;

        类型转换异常:ClassCastException
        Object o = 23;
        String s = (String)o;

        数字转换异常: NumberFormatException
        String number = "23aabbc" ;
        Integer it = Integer.valueOf(number);
        System.out.println(it + 1);

        运行时异常:一般是程序员业务没有考虑好或者是编程逻辑不严谨引起的程序错误，



        除RuntimeException之外所有的异常︰编译时异常，编译期必须处理的，否则程序不能通过编译。(日期格式化异常)。
案例：
        String date = "2015-01-1210:23:21";
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date d = sdf.parse(date);        需要 throws ParseException
        System.out.println(d);


        编译时异常和运行时异常:
        Javac.exe 编译时异常，是在编译成class文件时必须要处理的异常，也称之为受检异常
        Java.exe  运行时异常，在编译成class文件不需要处理，在运行字节码文件时可能出现的异常。

编译时异常的作用是什么:
        是担心程序员的技术不行，在编译阶段就爆出一个错误,目的在于提醒不要出错!
        编译时异常是可遇不可求。遇到了就遇到了呗。


处理流程：
        默认会在出现异常的代码那里自动的创建一个异常对象:ArithmeticException。
        异常会从方法中出现的点这里抛出给调用者，调用者最终抛出给JVM虚拟机。
        虚拟机接收到异常对象后，先在控制台直接输出异常栈信息数据。
        直接从当前执行的异常点干掉当前程序。
        后续代码没有机会执行了，因为程序已经死亡。

默认处理机制不是很好，它会导致程序直接死亡




编译时异常是编译阶段就出错的，所以必须处理，否则代码根本无法通过
编译时异常的处理形式有三种:
        出现异常直接抛出去给调用者，调用者也继续抛出去。
        出现异常自己捕获处理，不麻烦别人。
        前两者结合，出现异常直接抛出去给调用者，调用者捕获处理。


异常处理方式1——throws
        throws:用在方法上，可以将方法内部出现的异常抛出去给本方法的调用者处理。

这种方式并不好，发生异常的方法自己不处理异常，如果异常最终抛出去给虚拟机将引起程序死亡。

抛出异常格式:
        方法 throws 异常1，异常2，异常3 ..{
        }

规范做法:
        方法 throws Exception{}





异常处理方式2——try...catch...
        监视捕获异常，用在方法内部，可以将方法内部出现的异常直接捕获处理。

这种方式还可以，发生异常的方法自己独立完成异常的处理，程序可以继续往下执行。

格式:try{
            //监视可能出现异常的代码!
        }catch(异常类型1变量){
            //处理异常
        }catch(异常类型2变量){
            //处理异常
        }...

推荐格式：
        try{
        //可能出现异常的代码!
        }catch (Exception e){
          e.printStackTrace();//直接打印异常栈信息
        }

        Exception可以捕获处理一切异常类型!





异常处理方式3：
        方法直接将异通过throws抛出去给调用者
        调用者收到异常后直接捕获处理。

public class ExceptionDemo03 {
    public static void main(String[] args) {
        System.out.println("程序开始。...");
        try {
            parseTime(date:"2011-11-11 11:11:11");
            System.out.println("功能操作成功~~~");
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("功能操作失败~~~");
        }
        System.out.printin("程序结束。... ");
    }
        public static void parseTime (String date) throws Exception {
            SimpleDateFormat sdf = new simpleDateFormat(pattern:"yvyy-MM-dd HH:mm: ss");
            Date d = sdf.parse(date);
            System.out.println(d);

            InputStream is = new FileInputStream(name:"D :/meinv.jpg");
        }
}

异常处理的总结：
        在开发中按照规范来说第三种方式是最好的:底层的异常抛出去给最外层，最外层集中捕获处理。

        实际应用中，只要代码能够编译通过，并且功能能完成，那么每一种异常处理方式似乎也都是可以的。







运行时异常的处理形式：
        运行时异常编译阶段不会出错，是运行时才可能出错的，所以编译阶段不处理也可以。
        按照规范建议还是处理:建议在最外层调用处集中捕获处理即可。

推荐格式：
        try{
        //可能出现异常的代码!
        }catch (Exception e){
            e.printStackTrace();//直接打印异常栈信息
        }





自定义异常的必要?
        Java无法为这个世界上全部的问题提供异常类。
        如果企业想通过异常的方式来管理自己的某个业务问题，就需要自定义异常类了。

自定义异常的好处:
        可以使用异常的机制管理业务问题，如提醒程序员注意。
        同时一旦出现bug，可以用异常的形式清晰的指出出错的地方。

自定义异常的分类：
        自定义编译时异常：

        定义一个异常类继承Exception.
        重写构造器。
        在出现异常的地方用throw new自定义对象抛出，
        作用:编译时异常是编译阶段就报错，提醒更加强烈，一定需要处理! !

        自定义运行时异常：
        定义一个异常类继承RuntimeException.
        重写构造器。
        在出现异常的地方用throw new自定义对象抛出!
        作用:提醒不强烈，编译阶段不报错!!运行时才可能出现!!

案例：

public class ExceptionDemo {
    public static void main(String[] args) {
        try {
            checkAge(34);
        }catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void checkAge(int age) throws ItheimaAgeIlleagalException {
            if(age < 0 || age > 200){
                // 抛出去一个异常对象给调用者
                // throw :在方法内部直接创建一个异常对象，并从此点抱出
                // throws : 用在方法串明上的，抛出方法内部的异常..
                throw new ItheimaAgeIlleagalException(age + "is illeagal! ");
            }else {
                System.out.println("年龄合法:推荐商品给其购买~~");
            }
        }
}

另一个自定义类（ ItheimaAgeIlleagalException）：

public class ItheimaAgeIlleagalException extends Exception {
    public ItheimaAgeIlleagalException() {
    }

    public ItheimaAgeIlleagalException(String message) {
        super(message);
    }
}


