

正则表达式：
正则表达式可以用一些规定的字符来制定规则，并用来校验数据格式的合法性。

匹配规则：
字符类(默认匹配一个字符)：
[abc]             只能是a,b,或c
[^abc]            除了a, b, c之外的任何字符
[a-zA-Z]          a到zA到z，包括（范囿)
[a-d[m-p]]        a到d，或m通过p:([a-dm-p]联合)
[a-z&&[def]]      d,e,或f(交集)
[a-z&[^bc]]       a到z，除了b和c:([ad-z]减法)
[a-z&&[^m-p]]     a到z，除了m到p:([a-lq-z]减法)

预定义的字符类(默认匹配一个字符)：
.          任何字符
\d         一个数字:[0-9]
\D         非数字:[产o-9]
\s         一个空白字符:[itinkxoB\fr]
\S         非空白字符:[^s]
\w         [a-zA-Z_0-9]英文、数字、下划线
\W         [^w一个非单词字符\

贪婪的量词（配合匹配多个字符)：
X?      X，一次或根本不
x*      X，零次或多次
X+      X，一次或多次
X {n}   X，正好n次
X{n,}   X，至少n次
X{(n,m} X，至少n但不超过m次


字符串对象提供了匹配正则表达式规则的API：
public boolean matches(String regex);
判断是否匹配正则表达式，匹配返回true，不匹配返回false。
System. out.print1n( "a".matches("[abc]"));// true
System. out.println("z".matches("[abc]"));//false
System.out.println( "ab".matches("[abc]"));// false
System. out.print1n( "ab".matches("[abc]+"));//true


正则表达式在字符串方法中的使用：
public String replaceAll(String regex,String newStr);     按照正则表达式匹配的内容进行替换；
public String[] split(String regex);                      按照正则表达式匹配的内容进行分割字符串，返回一个字符串数组。


正则表达式支持爬取信息：
String rs ="来黑马程序学习Java,电话020-43422424，或者联系邮箱”＋
        "itcast@itcast.cn,电话18762832633，0203232323”+
        "邮箱bozai@itcast.cn，400-100-3233 , 4001003232";
//需求;从上面的内容中爬取出电话号码和邮箱。
//1.定义爬取规则
String regex = "(\lw{1,}@llw{2,10}(11. 1lw{2,10}){1,2})l"+
        "(1[3-9]\\d{9})I(O\\d{2,5}-?1ld{5,15})|400-?\\d{3,8}-?\ld{3,8}";
//2.编译正则表达式成为一个匹配规则对象
Pattern pattern = Pattern.compilE(regex);
//3.通过匹配规则对象得到一个匹配数据内容的匹配器对象Matcher matcher = pattern.matcher(rs);
//4.通过匹配器去内容中爬取出信息
while(matcher.find()){
        system.out.println(matcher.group());
}
